<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	 http://www.springframework.org/schema/beans/spring-beans.xsd
	 http://www.springframework.org/schema/context 
	 http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/security 
    http://www.springframework.org/schema/security/spring-security.xsd"
	default-autowire="byName" default-lazy-init="true">
	<!-- 扫描控制层 -->
	<!-- <context:component-scan base-package="com.duffiye"> -->
	<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" 
		/> -->
	<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" 
		/> -->
	<!-- </context:component-scan> -->

	<!-- 不要过滤图片等静态资源 -->
	<http pattern="resources/static/**/*.jpg" security="none" />
	<http pattern="resources/static/**/*.png" security="none" />
	<http pattern="resources/static/**/*.gif" security="none" />
	<http pattern="resources/static/**/*.css" security="none" />
	<http pattern="resources/static/**/*.js" security="none" />


	<!-- access-denied-page="/accessDenied.htm" -->
	<http auto-config="true" entry-point-ref="authenticationEntryPoint">
		<logout />
		<!-- <remember-me/> -->
		<session-management invalid-session-url="/admin/login.html">
			<concurrency-control max-sessions="10"
				error-if-maximum-exceeded="true" />
		</session-management>

		<form-login login-page="/admin/login.html"
			login-processing-url="/j_spring_security_check" default-target-url="/admin/index.html"
			always-use-default-target="true" authentication-failure-url="/admin/login.html?error=true" />


		<!-- login -->
		<!-- <custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" /> -->
		<!-- 增加一个自定义的filter，放在FILTER_SECURITY_INTERCEPTOR之前， 实现用户、角色、权限、资源的数据库管理。 -->
		<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR" />

	</http>

	<!-- 登录页面入口 -->
	<b:bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<b:property name="loginFormUrl" value="/admin/login.html" />
	</b:bean>


	<b:bean id="loginFilter"
		class="com.duffiye.core.security.MyUsernamePasswordAuthenticationFilter">
		<!-- 处理登录 -->
		<b:property name="filterProcessesUrl" value="/j_spring_security_check"></b:property>
		<b:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></b:property>
		<b:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></b:property>
		<b:property name="authenticationManager" ref="authenticationManager"></b:property>
	</b:bean>

	<b:bean id="loginLogAuthenticationSuccessHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<b:property name="defaultTargetUrl" value="/admin/index.html"></b:property>
	</b:bean>
	<b:bean id="simpleUrlAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<b:property name="defaultFailureUrl" value="/admin/login.html"></b:property>
	</b:bean>

	<!-- 认证管理器 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="daoAuthenticationProvider" />
	</authentication-manager>

	<!-- 一个自定义的filter，必须包含authenticationManager, accessDecisionManager,securityMetadataSource三个属性。 -->
	<b:bean id="securityFilter"
		class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="accessDecisionManager" ref="accessDecisionManager" />
		<b:property name="securityMetadataSource" ref="securityMetadataSource" />

	</b:bean>


	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
	<b:bean id="accessDecisionManager" class="com.duffiye.core.security.AccessDecisionManager" />

	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
	<b:bean id="securityMetadataSource"
		class="com.duffiye.core.security.SecurityMetadataSourceService"></b:bean>

	<!--加密 -->
	<b:bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<b:property name="userPropertyToUse" value="loginName" />
	</b:bean>
	<!-- 用户的密码加密或解密 -->
	<b:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<b:bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<b:property name="userDetailsService" ref="userDetailsManager" />
		<!-- <b:property name="userCache" ref="userCache" /> -->
		<b:property name="passwordEncoder" ref="passwordEncoder" />
		<b:property name="saltSource" ref="saltSource" />
	</b:bean>


	<!-- 用户详细信息管理：数据源、用户缓存（通过数据库管理用户、角色、权限、资源）。 -->
	<b:bean id="userDetailsManager" class="com.duffiye.core.security.UserDetailsService" />

	<!-- 启用用户的缓存功能 <b:bean id="userCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache"> 
		<b:property name="cache" ref="userEhCache" /> </b:bean> <b:bean id="userEhCache" 
		class="org.springframework.cache.ehcache.EhCacheFactoryBean"> <b:property 
		name="cacheName" value="userCache" /> <b:property name="cacheManager" ref="cacheManager" 
		/> </b:bean> <b:bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" 
		/> -->
</b:beans>